"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLicenseFileText = void 0;
const getLicensesForProjects_1 = require("./internal/getLicensesForProjects");
const lineEndings_1 = require("./lineEndings");
const SUFFIX = "-----------";
const CREDIT1 = "This file was generated with the generate-license-file npm package!";
const CREDIT2 = "https://www.npmjs.com/package/generate-license-file";
function getLicenseFileText(pathsToPackageJsons, lineEnding) {
    return __awaiter(this, void 0, void 0, function* () {
        if (typeof pathsToPackageJsons === "string") {
            pathsToPackageJsons = [pathsToPackageJsons];
        }
        const EOL = (0, lineEndings_1.getLineEndingValue)(lineEnding);
        const credit = getCredit(EOL);
        const licenses = yield (0, getLicensesForProjects_1.getLicensesForProjects)(pathsToPackageJsons);
        let licenseFile = credit + EOL + EOL;
        for (const license of licenses) {
            licenseFile += license.format(EOL) + EOL + EOL + SUFFIX + EOL + EOL;
        }
        licenseFile += credit + EOL;
        return licenseFile;
    });
}
exports.getLicenseFileText = getLicenseFileText;
const getCredit = (EOL) => CREDIT1 + EOL + CREDIT2;
