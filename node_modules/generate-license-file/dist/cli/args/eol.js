"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Eol = void 0;
const lineEndings_1 = require("../../lineEndings");
const argument_1 = require("./argument");
class Eol extends argument_1.Argument {
    constructor() {
        super(...arguments);
        this.choices = {
            CRLF: "crlf",
            LF: "lf",
            "System default": undefined,
        };
    }
    resolve(args) {
        return __awaiter(this, void 0, void 0, function* () {
            const inputtedEol = args["--eol"];
            if ((0, lineEndings_1.isLineEnding)(inputtedEol)) {
                return inputtedEol;
            }
            const answer = yield this.promptForMultipleChoice("Invalid line ending given. Please choose a line ending: ", this.choices);
            return answer;
        });
    }
    parse(args) {
        return __awaiter(this, void 0, void 0, function* () {
            const eol = args["--eol"];
            if (!(0, lineEndings_1.isLineEnding)(eol)) {
                throw new Error(`Invalid line ending given: '${eol}'. Possible values are 'crlf' or 'lf'. Omit the --eol flag to use the system default.`);
            }
            return eol;
        });
    }
}
exports.Eol = Eol;
