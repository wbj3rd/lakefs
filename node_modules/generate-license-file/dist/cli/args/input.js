"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Input = void 0;
const file_utils_1 = require("../../utils/file.utils");
const spinner_1 = require("../spinner");
const argument_1 = require("./argument");
class Input extends argument_1.Argument {
    constructor() {
        super(...arguments);
        this.question = "Package.json location: ";
    }
    resolve(args) {
        return __awaiter(this, void 0, void 0, function* () {
            const initialValue = yield this.getInitialValue();
            let input = args["--input"];
            let inputExists = input ? yield (0, file_utils_1.doesFileExist)(input) : false;
            while (!input || !inputExists) {
                if (!!input && !inputExists) {
                    spinner_1.spinner.fail("Package.json not found!");
                }
                input = yield this.promptForString(this.question, initialValue);
                inputExists = yield (0, file_utils_1.doesFileExist)(input);
            }
            return input;
        });
    }
    parse(args) {
        return __awaiter(this, void 0, void 0, function* () {
            const input = args["--input"];
            if (!input) {
                throw new Error("No --input argument given.");
            }
            const inputExists = yield (0, file_utils_1.doesFileExist)(input);
            if (!inputExists) {
                throw new Error(`Given --input file not found. Cannot find '${input}'.`);
            }
            return input;
        });
    }
    getInitialValue() {
        return __awaiter(this, void 0, void 0, function* () {
            const packageJsonExists = yield (0, file_utils_1.doesFileExist)("./package.json");
            return packageJsonExists ? "./package.json" : "";
        });
    }
}
exports.Input = Input;
