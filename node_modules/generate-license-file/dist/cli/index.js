"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.main = void 0;
const arg_1 = __importDefault(require("arg"));
const path_1 = require("path");
const generateLicenseFile_1 = require("../generateLicenseFile");
const console_utils_1 = __importDefault(require("../utils/console.utils"));
const packageJson_utils_1 = require("../utils/packageJson.utils");
const eol_1 = require("./args/eol");
const input_1 = require("./args/input");
const no_spinner_1 = require("./args/no-spinner");
const output_1 = require("./args/output");
const cli_arguments_1 = require("./cli-arguments");
const spinner_1 = require("./spinner");
function main(args) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            yield cli(args);
        }
        catch (e) {
            const errorMessage = getMessageFromCaughtUnknown(e);
            spinner_1.spinner.fail(errorMessage);
            process.exitCode = 1;
        }
    });
}
exports.main = main;
function cli(args) {
    return __awaiter(this, void 0, void 0, function* () {
        const givenUserInputs = parseUserInputs(args);
        if (givenUserInputs && givenUserInputs["--version"]) {
            yield printPackageVersion();
            return;
        }
        const { input, output, eol, noSpinner } = yield parseArgumentsIntoOptions(givenUserInputs);
        if (!noSpinner) {
            spinner_1.spinner.start();
        }
        yield (0, generateLicenseFile_1.generateLicenseFile)(input, output, eol);
        spinner_1.spinner.stop();
    });
}
function parseUserInputs(rawArgs) {
    return (0, arg_1.default)(cli_arguments_1.argumentsWithAliases, {
        argv: rawArgs.slice(2),
    });
}
function parseArgumentsIntoOptions(args) {
    return __awaiter(this, void 0, void 0, function* () {
        const isCi = args["--ci"];
        if (isCi) {
            args["--no-spinner"] = true;
            try {
                return yield getOptionsOrThrow(args);
            }
            catch (e) {
                const errorMessage = getMessageFromCaughtUnknown(e);
                throw new Error(`Error parsing arguments in --ci mode: ${errorMessage}`);
            }
        }
        return yield promptForMissingOptions(args);
    });
}
function getOptionsOrThrow(options) {
    return __awaiter(this, void 0, void 0, function* () {
        const input = yield new input_1.Input().parse(options);
        const output = yield new output_1.Output().parse(options);
        const eol = yield new eol_1.Eol().parse(options);
        const noSpinner = yield new no_spinner_1.NoSpinner().parse(options);
        return { input, output, eol, noSpinner };
    });
}
function promptForMissingOptions(options) {
    return __awaiter(this, void 0, void 0, function* () {
        const input = yield new input_1.Input().resolve(options);
        const output = yield new output_1.Output().resolve(options);
        const eol = yield new eol_1.Eol().resolve(options);
        const noSpinner = yield new no_spinner_1.NoSpinner().resolve(options);
        return { input, output, eol, noSpinner };
    });
}
function printPackageVersion() {
    return __awaiter(this, void 0, void 0, function* () {
        const { version } = yield (0, packageJson_utils_1.readPackageJson)((0, path_1.join)(__dirname, "../../package.json"));
        console_utils_1.default.log(`v${version}`);
    });
}
function getMessageFromCaughtUnknown(e) {
    if (e instanceof Error) {
        return e.message;
    }
    if (typeof e === "string") {
        return e;
    }
    return "Unknown error";
}
