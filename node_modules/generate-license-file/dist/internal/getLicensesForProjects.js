"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLicensesForProjects = void 0;
const path_1 = __importDefault(require("path"));
const license_1 = require("../models/license");
const console_utils_1 = __importDefault(require("../utils/console.utils"));
const file_utils_1 = require("../utils/file.utils");
const license_utils_1 = require("../utils/license.utils");
const packageJson_utils_1 = require("../utils/packageJson.utils");
const UTF8 = "utf-8";
function getLicensesForProjects(pathsToPackageJsons) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        const licensesMap = new Map();
        const projects = yield getProjectsForPackageJsons(pathsToPackageJsons);
        for (const project of projects) {
            for (const [dependencyName, dependencyInfo] of Object.entries(project)) {
                const licenseContent = yield getLicenseContent(dependencyInfo);
                const dependenciesUsingLicense = (_a = licensesMap.get(licenseContent)) !== null && _a !== void 0 ? _a : [];
                dependenciesUsingLicense.push(dependencyName);
                licensesMap.set(licenseContent, dependenciesUsingLicense);
            }
        }
        return flattenDependencyMapToLicenseArray(licensesMap);
    });
}
exports.getLicensesForProjects = getLicensesForProjects;
const getProjectsForPackageJsons = (pathsToPackageJsons) => __awaiter(void 0, void 0, void 0, function* () {
    const projects = [];
    for (const pathToPackageJson of pathsToPackageJsons) {
        const project = yield getProjectFromPackageJsonPath(pathToPackageJson);
        projects.push(project);
    }
    return projects;
});
const getProjectFromPackageJsonPath = (pathToPackageJson) => __awaiter(void 0, void 0, void 0, function* () {
    const directoryOfPackageJson = path_1.default.dirname(pathToPackageJson);
    const currentProjectIdentifier = yield getCurrentProjectIdentifier(pathToPackageJson);
    const project = yield (0, license_utils_1.getProject)({
        start: directoryOfPackageJson,
        production: true,
        excludePackages: currentProjectIdentifier,
    });
    return project;
});
const getLicenseContent = (moduleInfo) => __awaiter(void 0, void 0, void 0, function* () {
    const licenseFilePath = moduleInfo.licenseFile;
    if (!!licenseFilePath && (yield (0, file_utils_1.doesFileExist)(licenseFilePath))) {
        return yield (0, file_utils_1.readFile)(licenseFilePath, { encoding: UTF8 });
    }
    return getLicenseType(moduleInfo);
});
const getLicenseType = (moduleInfo) => {
    const { licenses } = moduleInfo;
    if (!!licenses && licenses.length > 0) {
        const licenseType = typeof licenses === "string" ? licenses : licenses[0];
        return `(${licenseType})`;
    }
    console_utils_1.default.warn(`No license found for ${moduleInfo.name}!`);
    return "Unknown license!";
};
const flattenDependencyMapToLicenseArray = (dependencyLicenses) => {
    const licenses = [];
    for (const [license, dependencies] of dependencyLicenses) {
        licenses.push(new license_1.License(license, dependencies));
    }
    return licenses;
};
const getCurrentProjectIdentifier = (pathToPackageJson) => __awaiter(void 0, void 0, void 0, function* () {
    const { name, version } = yield (0, packageJson_utils_1.readPackageJson)(pathToPackageJson);
    if (!name) {
        throw new Error('Cannot find the "name" key in the package.json!');
    }
    if (!version) {
        throw new Error('Cannot find the "version" key in the package.json!');
    }
    const currentProjectIdentifier = `${name}@${version}`;
    return currentProjectIdentifier;
});
