"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.writeFileAsync = exports.doesFolderExist = exports.doesFileExist = exports.readFile = void 0;
const promises_1 = __importDefault(require("fs/promises"));
const path_1 = require("path");
var promises_2 = require("fs/promises");
Object.defineProperty(exports, "readFile", { enumerable: true, get: function () { return promises_2.readFile; } });
const UTF8 = "utf-8";
function doesFileExist(path) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const stats = yield promises_1.default.stat(path);
            return stats.isFile();
        }
        catch (_a) {
            return false;
        }
    });
}
exports.doesFileExist = doesFileExist;
function doesFolderExist(path) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const stats = yield promises_1.default.stat(path);
            return stats.isDirectory();
        }
        catch (_a) {
            return false;
        }
    });
}
exports.doesFolderExist = doesFolderExist;
function writeFileAsync(filePath, content) {
    return __awaiter(this, void 0, void 0, function* () {
        const directory = (0, path_1.dirname)(filePath);
        const directoryExists = yield doesFolderExist(directory);
        if (!directoryExists) {
            yield promises_1.default.mkdir(directory, { recursive: true });
        }
        return yield promises_1.default.writeFile(filePath, content, { encoding: UTF8 });
    });
}
exports.writeFileAsync = writeFileAsync;
